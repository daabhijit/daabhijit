# -*- coding: utf-8 -*-
"""ML-Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aNn5SGRYeVXFcxm7G6dGfoPTa5mW5vpl

# IMPORT LIBRARIES
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings

"""# READ DATASET

"""

df1=pd.read_csv("/content/train1.txt",header=None)
df1. columns = ['Input1 ','Input2' ,'Target']
df1. head()

df1['Target'].unique()

df1.dtypes

df1.shape

df2=pd.read_csv("/content/train2.txt",header=None)
df2.columns = ['Input1 ','Input2' ,'Target']
df2.head()

df2['Target'].unique()

df2.dtypes

df2.shape

df3=pd.read_csv("/content/train3.txt",header=None)
df3.columns = ['Input1 ','Input2' ,'Target']
df3.head()

df3['Target'].unique()

df3.dtypes

df3.shape

"""#DF1
##APPLYING KNN,SVM,PCA
"""

X = df1[['Input1 ', 'Input2']]
y = df1['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN Accuracy for df1:", accuracy)

svm = SVC()
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM Accuracy for df1:", accuracy)


pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca = KNeighborsClassifier()
knn_pca.fit(X_train, y_train)
y_pred = knn_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df1:", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)

print(f"Classification Accuracy of {knn} is:", accuracy)
print(f"Classification Error of {knn} is: {error:.02f}" )
print(f"Confusion Matrix of {knn} is: " )
print(cm)


print(f"Classification Accuracy of {svm} is:", accuracy)
print(f"Classification Error of {svm} is: {error:.02f}" )
print(f"Confusion Matrix of {svm} is: " )
print(cm)


print(f"Classification Accuracy of {knn_pca} is:", accuracy)
print(f"Classification Error of {knn_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca} is: " )
print(cm)

"""##REDUCING THE NUMBER OF FEATURES FROM 2 TO 1.AND TEST THE PERFORMANCE"""

pca1 = PCA(n_components=1)
X_pca = pca1.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca1 = KNeighborsClassifier()
knn_pca1.fit(X_train, y_train)
y_pred = knn_pca1.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df1 (1 feature):", accuracy)

pca = PCA(n_components=1)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
svm_pca = KNeighborsClassifier()
svm_pca.fit(X_train, y_train)
y_pred = svm_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM with PCA Accuracy for df1 (1 feature):", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)
print(f"KNN with PCA Accuracy for df1 (1 feature) {knn_pca1} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {knn_pca1} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca1} is: " )
print(cm)

print(f"svm with PCA Accuracy for df1 (1 feature) {svm_pca} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {svm_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {svm_pca} is: " )
print(cm)

"""#DF2
##APPLYING KNN,SVM,PCA
"""

X = df2[['Input1 ', 'Input2']]
y = df2['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN Accuracy for df2:", accuracy)

svm = SVC()
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM Accuracy for df2:", accuracy)


pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca = KNeighborsClassifier()
knn_pca.fit(X_train, y_train)
y_pred = knn_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df2:", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)

print(f"Classification Accuracy of {knn} is:", accuracy)
print(f"Classification Error of {knn} is: {error:.02f}" )
print(f"Confusion Matrix of {knn} is: " )
print(cm)


print(f"Classification Accuracy of {svm} is:", accuracy)
print(f"Classification Error of {svm} is: {error:.02f}" )
print(f"Confusion Matrix of {svm} is: " )
print(cm)


print(f"Classification Accuracy of {knn_pca} is:", accuracy)
print(f"Classification Error of {knn_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca} is: " )
print(cm)

"""##REDUCING THE NUMBER OF FEATURES FROM 2 TO 1.AND TEST THE PERFORMANCE"""

pca = PCA(n_components=1)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca = KNeighborsClassifier()
knn_pca.fit(X_train, y_train)
y_pred = knn_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df2 (1 feature):", accuracy)

pca = PCA(n_components=1)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
svm_pca = KNeighborsClassifier()
svm_pca.fit(X_train, y_train)
y_pred = svm_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM with PCA Accuracy for df2 (1 feature):", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)
print(f"KNN with PCA Accuracy for df1 (1 feature) {knn_pca} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {knn_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca} is: " )
print(cm)

print(f"svm with PCA Accuracy for df1 (1 feature) {svm_pca} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {svm_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {svm_pca} is: " )
print(cm)

"""#DF3
##APPLYING KNN,SVM,PCA
"""

X = df3[['Input1 ', 'Input2']]
y = df3['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN Accuracy for df3:", accuracy)

svm = SVC()
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM Accuracy for df3:", accuracy)


pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca = KNeighborsClassifier()
knn_pca.fit(X_train, y_train)
y_pred = knn_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df3:", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)

print(f"Classification Accuracy of {knn} is:", accuracy)
print(f"Classification Error of {knn} is: {error:.02f}" )
print(f"Confusion Matrix of {knn} is: " )
print(cm)


print(f"Classification Accuracy of {svm} is:", accuracy)
print(f"Classification Error of {svm} is: {error:.02f}" )
print(f"Confusion Matrix of {svm} is: " )
print(cm)


print(f"Classification Accuracy of {knn_pca} is:", accuracy)
print(f"Classification Error of {knn_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca} is: " )
print(cm)

"""##REDUCING THE NUMBER OF FEATURES FROM 2 TO 1.AND TEST THE PERFORMANCE"""

pca = PCA(n_components=1)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
knn_pca = KNeighborsClassifier()
knn_pca.fit(X_train, y_train)
y_pred = knn_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("KNN with PCA Accuracy for df3 (1 feature):", accuracy)

pca = PCA(n_components=1)
X_pca = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
svm_pca = KNeighborsClassifier()
svm_pca.fit(X_train, y_train)
y_pred = svm_pca.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("SVM with PCA Accuracy for df3 (1 feature):", accuracy)

error = 1-accuracy
cm = confusion_matrix(y_test, y_pred)
print(f"KNN with PCA Accuracy for df1 (1 feature) {knn_pca1} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {knn_pca1} is: {error:.02f}" )
print(f"Confusion Matrix of {knn_pca1} is: " )
print(cm)

print(f"svm with PCA Accuracy for df1 (1 feature) {svm_pca} is:", accuracy)
print(f"KNN with PCA Error for df1 (1 feature) {svm_pca} is: {error:.02f}" )
print(f"Confusion Matrix of {svm_pca} is: " )
print(cm)

"""#MERGING DIFFERENT DATASET TO CHECK THE MODEL PERFORMANCE"""

df1.columns = ['Input1', 'Input2', 'Target']
df2.columns = ['Input1', 'Input2', 'Target']
df3.columns = ['Input1', 'Input2', 'Target']
merged_df = pd.concat([df1, df2, df3], ignore_index=True)
accuracy_scores = []
for i in range(1, 4):

    data = merged_df.head(len(df1)*i)
    X = data[['Input1', 'Input2']]
    y = data['Target']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    knn = KNeighborsClassifier()
    knn.fit(X_train, y_train)

    accuracy = knn.score(X_test, y_test)
    accuracy_scores.append(accuracy)
    print(f"Accuracy after merging dataset {i}: {accuracy}")

merged_df.head()

merged_df.shape

plt.plot(range(1, 4), accuracy_scores, marker='o')
plt.xlabel('Number of datasets merged')
plt.ylabel('Accuracy')
plt.title('Accuracy vs. Dataset Size')
plt.grid(True)
plt.show()